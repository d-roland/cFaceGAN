import matplotlib.pyplot as plt
import numpy as np

# copied from evaluate_metrics runs
column_headers = ["No. of Conditions", "Training in Kilo-Images", "SWDx1e3 128", "SWDx1e3 64", "SWDx1e3 32", "SWDx1e3 16", "SWDx1e3 Avg.", "Frechet Inception Distance", "Inception Score Mean", "Inception Score STD", "MS-SSIM"]
outcome = np.array([
    [[0, 1462,      96.1258,      68.5823,      60.3547,      34.7602,      64.9557,      371.5589,  1.0946,    0.0014,    0.4112 ],
    [0, 2705,      81.9215,      65.0667,      33.6666,      15.5497,      49.0511,      286.2093,  1.4191,    0.0049,    0.3497 ],
    [0, 3747,      80.5006,      26.0804,      14.5134,      8.7088,       32.4508,      222.2051,  1.8800,    0.0161,    0.3123 ],
    [0, 4627,      57.6811,      15.1738,      6.3215,       11.3269,      22.6258,      115.3787,  2.2979,    0.0372,    0.3125 ],
    [0, 5407,      48.9704,      10.9686,      4.5062,       8.0377,       18.1207,      64.3641,   2.5297,    0.0398,    0.3028 ],
    [0, 6008,      8.0274,       4.5112,       4.0036,       11.8686,      7.1027,       15.9422,   2.4883,    0.0322,    0.3129 ]],
    [[1, 1462,     97.3618,      67.2337,      59.8293,      32.9543,      64.3448,      368.8975,  1.0961,    0.0014,    0.4159 ],
    [1, 2705,      80.8807,      65.2606,      32.6417,      14.3106,      48.2734,      283.2834,  1.4245,    0.0063,    0.3458 ],
    [1, 3747,      77.2827,      26.8057,      13.7922,      10.5136,      32.0985,      221.3285,  1.8813,    0.0154,    0.3108 ],
    [1, 4627,      58.6030,      15.9599,      6.8542,       10.1976,      22.9037,      119.3153,  2.3153,    0.0394,    0.3122 ],
    [1, 5407,      51.8717,      10.6719,      4.9910,       8.1247,       18.9148,      64.3422,   2.5216,    0.0366,    0.3027 ],
    [1, 6008,      6.6683,       4.9320,       4.0242,       12.2911,      6.9789,       15.3097,   2.5281,    0.0506,    0.3093 ]],
    [[2, 1462,     96.4076,      67.8129,      59.5745,      34.0418,      64.4592,      367.6337,  1.0943,    0.0014,    0.4155 ],
    [2, 2705,      80.8479,      65.3625,      33.0147,      15.8623,      48.7718,      283.4800,  1.4241,    0.0089,    0.3454 ],
    [2, 3747,      76.9700,      26.6125,      13.8152,      9.4108,       31.7021,      220.7781,  1.8812,    0.0170,    0.3098 ],
    [2, 4627,      58.4980,      16.5242,      6.6245,       9.6941,       22.8352,      118.2849,  2.3071,    0.0422,    0.3139 ],
    [2, 5407,      52.3240,      10.2808,      4.6585,       7.8410,       18.7761,      64.3740,   2.4714,    0.0332,    0.3007 ],
    [2, 6008,      6.3646,       3.8627,       3.1668,       13.6438,      6.7595,       15.1613,   2.4610,    0.0284,    0.3066 ]],
    [[4, 1462,     97.2151,      67.4342,      59.9359,      33.3200,      64.4763,      368.0738,  1.0953,    0.0015,    0.4119 ],
    [4, 2705,      81.2592,      65.9037,      33.3637,      14.2780,      48.7012,      284.9919,  1.4394,    0.0070,    0.3449 ],
    [4, 3747,      76.9292,      26.3361,      13.5468,      8.2754,       31.2719,      223.1291,  1.8700,    0.0161,    0.3098 ],
    [4, 4627,      58.6061,      15.9777,      6.5343,       10.4174,      22.8839,      116.1450,  2.3113,    0.0272,    0.3128 ],
    [4, 5407,      52.2701,      10.0487,      5.3644,       8.6782,       19.0903,      65.8230,   2.5537,    0.0323,    0.3007 ],
    [4, 6008,      6.5288,       4.0722,       3.7489,       12.0112,      6.5903,       15.4705,   2.4692,    0.0465,    0.3034 ]],
    [[40, 1462,      96.5464,      67.6728,      60.4993,      33.6181,      64.5842,      369.3204,  1.0939,    0.0018,    0.4118 ],
    [40, 2705,      82.7584,      66.9999,      34.7418,      13.5152,      49.5038,      283.8927,  1.3995,    0.0072,    0.3406 ],
    [40, 3747,      78.2569,      28.0555,      14.2010,      8.4500,       32.2408,      225.5988,  1.8435,    0.0120,    0.3058 ],
    [40, 4627,      66.2064,      17.8668,      6.6644,       10.5925,     25.3325,      126.7076,  2.1764,    0.0451,    0.3050 ],
    [40, 5407,      56.9535,      12.3072,      5.4165,       10.3484,      21.2564,      78.5310,   2.3000,    0.0409,    0.3096 ],
    [40, 6008,      11.9386,      4.7757,       4.4931,       16.0086,      9.3040,       19.9661,   2.2969,    0.0264,    0.3103 ]]
          ])

for cond_metrics in outcome:
    plt.plot(cond_metrics[:, 1], cond_metrics[:, 6], label = str(int(cond_metrics[0,0]))+" conditions")
plt.title(column_headers[6])
plt.xlabel(column_headers[1])
plt.legend()
plt.show()

for cond_metrics in outcome:
    plt.plot(cond_metrics[:, 1], cond_metrics[:, 7], label = str(int(cond_metrics[0,0]))+" conditions")
plt.title(column_headers[7])
plt.xlabel(column_headers[1])
plt.legend()
plt.show()

for cond_metrics in outcome:
    plt.plot(cond_metrics[:, 1], cond_metrics[:, 8], label = str(int(cond_metrics[0,0]))+" conditions")
plt.title(column_headers[8])
plt.xlabel(column_headers[1])
plt.legend()
plt.show()

for cond_metrics in outcome:
    plt.plot(cond_metrics[:, 1], cond_metrics[:, 10], label = str(int(cond_metrics[0,0]))+" conditions")
plt.title(column_headers[10])
plt.xlabel(column_headers[1])
plt.legend()
plt.show()

